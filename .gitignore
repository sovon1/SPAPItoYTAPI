#include <stdio.h>



int main() {



    int i, j, k;

    int numOfRows1, numOfCols1, numOfRows2, numOfCols2;

    int A[10][10], B[10][10], C[10][10];



    printf("How many rows and columns for the first matrix: ");

    scanf("%d %d", &numOfRows1, &numOfCols1);



    printf("How many rows and columns for the second matrix: ");

    scanf("%d %d", &numOfRows2, &numOfCols2);



    while (numOfCols1 != numOfRows2) {

        printf("Error: Number of columns in the first matrix must be equal to the number of rows in the second matrix.\n");



        printf("How many rows and columns for the first matrix: ");

        scanf("%d %d", &numOfRows1, &numOfCols1);



        printf("How many rows and columns for the second matrix: ");

        scanf("%d %d", &numOfRows2, &numOfCols2);

    }



    // Scanning matrix A

    printf("Enter elements for A matrix.\n");

    for (i = 0; i < numOfRows1; i++) {

        for (j = 0; j < numOfCols1; j++) {

            printf("A [%d][%d] : ", i, j);

            scanf("%d", &A[i][j]);

        }

        printf("\n");

    }



    // Scanning matrix B

    printf("Enter elements for B matrix.\n");

    for (i = 0; i < numOfRows2; i++) {

        for (j = 0; j < numOfCols2; j++) {

            printf("B [%d][%d] : ", i, j);

            scanf("%d", &B[i][j]);

        }

        printf("\n");

    }



    // Multiplying matrices A and B

    for (i = 0; i < numOfRows1; i++) {

        for (j = 0; j < numOfCols2; j++) {

            C[i][j] = 0;

            for (k = 0; k < numOfCols1; k++) {

                C[i][j] += A[i][k] * B[k][j];

            }

        }

    }



    // Printing matrices A, B, and the result C

    printf("The A matrix is:\n");

    for (i = 0; i < numOfRows1; i++) {

        for (j = 0; j < numOfCols1; j++) {

            printf("%d ", A[i][j]);

        }

        printf("\n");

    }



    printf("The B matrix is:\n");

    for (i = 0; i < numOfRows2; i++) {

        for (j = 0; j < numOfCols2; j++) {

            printf("%d ", B[i][j]);

        }

        printf("\n");

    }

//printing multiplied matrix

    printf("The result matrix C (A * B) is:\n");

    for (i = 0; i < numOfRows1; i++) {

        for (j = 0; j < numOfCols2; j++) {

            printf("%d ", C[i][j]);

        }

        printf("\n");

    }



    return 0;

}
*/config/development
*/logs/log-*.php
!*/logs/index.html
*/cache/*
!system/cache/*
!*/cache/index.html
!*/cache/.htaccess

user_guide_src/build/*
user_guide_src/cilexer/build/*
user_guide_src/cilexer/dist/*
user_guide_src/cilexer/pycilexer.egg-info/*

#codeigniter 3
application/logs/*
!application/logs/index.html
!application/logs/.htaccess
/vendor/


Certainly! Here's a simplified version without a fixed maximum size:

```c
#include <stdio.h>

int main() {
    int arr[100];
    int size, i, j;

    printf("Enter size of array: ");
    scanf("%d", &size);

    printf("Enter elements in array: ");
    for (i = 0; i < size; i++) {
        scanf("%d", &arr[i]);
    }

    printf("\nUnique elements in the array are: ");
    for (i = 0; i < size; i++) {
        int isUnique = 1;
        for (j = 0; j < i; j++) {
            if (arr[i] == arr[j]) {
                isUnique = 0;
                break;
            }
        }

        if (isUnique) {
            printf("%d ", arr[i]);
        }
    }

    return 0;
}
```

This version removes the predefined maximum size and still efficiently finds and prints unique elements in the array.
